import "std/fungible_token_interface"

Contract DephiumCoin(
    symbol: ByteVec,
    name: ByteVec,
    decimals: U256,
    supply: U256,
    mut balance: U256,
    ownerAddress : Address
) implements IFungibleToken {

    event Issue(to: Address, amount: U256)

    pub fn getTotalSupply() -> U256 {
        return supply
    }

    pub fn getSymbol() -> ByteVec {
        return symbol
    }

    pub fn getName() -> ByteVec {
        return name
    }

    pub fn getDecimals() -> U256 {
        return decimals
    }

    pub fn balance() -> U256 {
        return balance
    }

   @using(assetsInContract = true, updateFields = true, checkExternalCaller = false, preapprovedAssets = true)
    pub fn issueDephiumCoin(amount: U256) -> () {
        emit Debug(`The current balance is ${balance}`)
        emit Debug(`The amount to issue is ${ownerAddress}`)
        emit Debug(`amount transfered`)
        transferTokenFromSelf!(callerAddress!(), selfTokenId!(), amount)
        balance = balance - amount
        emit Issue(callerAddress!(), amount)
    }

    @using(assetsInContract = true, checkExternalCaller = false, preapprovedAssets = true)
    pub fn transfer(amount : U256, win : Bool) -> () {
        if(win) {
            transferTokenFromSelf!(callerAddress!(), selfTokenId!(), amount*2)
        }
        else{
            burnToken!(callerAddress!(), selfTokenId!(), amount)
        }
    }
}