/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, testMethod, callMethod, fetchContractState, ContractInstance, signExecuteMethod, addStdIdToFields, encodeContractFields, } from "@alephium/web3";
import { default as SpongeBobCatMemesContractJson } from "../SpongeBobCatMemes.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
class Factory extends ContractFactory {
    constructor() {
        super(...arguments);
        this.tests = {
            handleWin: async (params) => {
                return testMethod(this, "handleWin", params, getContractByCodeHash);
            },
        };
    }
    encodeFields(fields) {
        return encodeContractFields(addStdIdToFields(this.contract, fields), this.contract.fieldsSig, []);
    }
    at(address) {
        return new SpongeBobCatMemesInstance(address);
    }
    stateForTest(initFields, asset, address) {
        return this.stateForTest_(initFields, asset, address, undefined);
    }
}
// Use this object to test and deploy the contract
export const SpongeBobCatMemes = new Factory(Contract.fromJson(SpongeBobCatMemesContractJson, "", "23f09147a68b2c7ea819bb6e6e0f79151a45100c9761ad16519c94b5cca7f633", []));
registerContract(SpongeBobCatMemes);
// Use this class to interact with the blockchain
export class SpongeBobCatMemesInstance extends ContractInstance {
    constructor(address) {
        super(address);
        this.view = {
            handleWin: async (params) => {
                return callMethod(SpongeBobCatMemes, this, "handleWin", params, getContractByCodeHash);
            },
        };
        this.transact = {
            handleWin: async (params) => {
                return signExecuteMethod(SpongeBobCatMemes, this, "handleWin", params);
            },
        };
    }
    async fetchState() {
        return fetchContractState(SpongeBobCatMemes, this);
    }
}
