/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as MemeContestContractJson } from "../MemeContest.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import { MemeSubmission, AllStructs } from "./types";
import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace MemeContestTypes {
  export type Fields = {
    contestAdmin: Address;
    submissionEnd: bigint;
    judgingEnd: bigint;
    entryFee: bigint;
    ended: boolean;
    totalPrizePool: bigint;
    highestScore: bigint;
    winningAddress: Address;
  };

  export type State = ContractState<Fields>;

  export type MemeSubmittedEvent = ContractEvent<{
    creator: Address;
    memeHash: HexString;
  }>;
  export type MemeJudgedEvent = ContractEvent<{
    creator: Address;
    memeHash: HexString;
    score: bigint;
  }>;
  export type ContestEndedEvent = ContractEvent<{
    winner: Address;
    prize: bigint;
  }>;

  export interface CallMethodTable {
    entryFee: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    judgeMeme: {
      params: CallContractParams<{
        submitter: Address;
        index: bigint;
        aiScore: bigint;
      }>;
      result: CallContractResult<null>;
    };
    submitMeme: {
      params: CallContractParams<{ creator: Address; memeHash: HexString }>;
      result: CallContractResult<null>;
    };
    endContest: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    getSubmissionCount: {
      params: CallContractParams<{ creator: Address }>;
      result: CallContractResult<bigint>;
    };
    getSubmission: {
      params: CallContractParams<{ creator: Address; index: bigint }>;
      result: CallContractResult<MemeSubmission>;
    };
    getCurrentPrizePool: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    entryFee: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    judgeMeme: {
      params: SignExecuteContractMethodParams<{
        submitter: Address;
        index: bigint;
        aiScore: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    submitMeme: {
      params: SignExecuteContractMethodParams<{
        creator: Address;
        memeHash: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    endContest: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getSubmissionCount: {
      params: SignExecuteContractMethodParams<{ creator: Address }>;
      result: SignExecuteScriptTxResult;
    };
    getSubmission: {
      params: SignExecuteContractMethodParams<{
        creator: Address;
        index: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getCurrentPrizePool: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];

  export type Maps = {
    submissions?: Map<HexString, MemeSubmission>;
    submissionCount?: Map<Address, bigint>;
  };
}

class Factory extends ContractFactory<
  MemeContestInstance,
  MemeContestTypes.Fields
> {
  encodeFields(fields: MemeContestTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  eventIndex = { MemeSubmitted: 0, MemeJudged: 1, ContestEnded: 2 };
  consts = {
    ErrorCodes: {
      InvalidArg: BigInt("0"),
      SubmissionsClosed: BigInt("1"),
      InvalidCreatorAddress: BigInt("2"),
      JudgingNotStarted: BigInt("4"),
      JudgingEnded: BigInt("5"),
      UnauthorizedJudging: BigInt("6"),
      ContestNotEnded: BigInt("7"),
      ContestAlreadyEnded: BigInt("8"),
      MemeAlreadyJudged: BigInt("9"),
    },
  };

  at(address: string): MemeContestInstance {
    return new MemeContestInstance(address);
  }

  tests = {
    entryFee: async (
      params: Omit<
        TestContractParams<
          MemeContestTypes.Fields,
          never,
          MemeContestTypes.Maps
        >,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint, MemeContestTypes.Maps>> => {
      return testMethod(this, "entryFee", params, getContractByCodeHash);
    },
    judgeMeme: async (
      params: TestContractParams<
        MemeContestTypes.Fields,
        { submitter: Address; index: bigint; aiScore: bigint },
        MemeContestTypes.Maps
      >
    ): Promise<TestContractResult<null, MemeContestTypes.Maps>> => {
      return testMethod(this, "judgeMeme", params, getContractByCodeHash);
    },
    submitMeme: async (
      params: TestContractParams<
        MemeContestTypes.Fields,
        { creator: Address; memeHash: HexString },
        MemeContestTypes.Maps
      >
    ): Promise<TestContractResult<null, MemeContestTypes.Maps>> => {
      return testMethod(this, "submitMeme", params, getContractByCodeHash);
    },
    endContest: async (
      params: Omit<
        TestContractParams<
          MemeContestTypes.Fields,
          never,
          MemeContestTypes.Maps
        >,
        "testArgs"
      >
    ): Promise<TestContractResult<null, MemeContestTypes.Maps>> => {
      return testMethod(this, "endContest", params, getContractByCodeHash);
    },
    getSubmissionCount: async (
      params: TestContractParams<
        MemeContestTypes.Fields,
        { creator: Address },
        MemeContestTypes.Maps
      >
    ): Promise<TestContractResult<bigint, MemeContestTypes.Maps>> => {
      return testMethod(
        this,
        "getSubmissionCount",
        params,
        getContractByCodeHash
      );
    },
    getSubmission: async (
      params: TestContractParams<
        MemeContestTypes.Fields,
        { creator: Address; index: bigint },
        MemeContestTypes.Maps
      >
    ): Promise<TestContractResult<MemeSubmission, MemeContestTypes.Maps>> => {
      return testMethod(this, "getSubmission", params, getContractByCodeHash);
    },
    getCurrentPrizePool: async (
      params: Omit<
        TestContractParams<
          MemeContestTypes.Fields,
          never,
          MemeContestTypes.Maps
        >,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint, MemeContestTypes.Maps>> => {
      return testMethod(
        this,
        "getCurrentPrizePool",
        params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(
    initFields: MemeContestTypes.Fields,
    asset?: Asset,
    address?: string,
    maps?: MemeContestTypes.Maps
  ) {
    return this.stateForTest_(initFields, asset, address, maps);
  }
}

// Use this object to test and deploy the contract
export const MemeContest = new Factory(
  Contract.fromJson(
    MemeContestContractJson,
    "=7-4=1-3+2=1-2=2-2+24=2-1+4=3-1=1+342ce42dc=41-1+4=318+7a7e021472656d6f7665206174206d617020706174683a2000=44+7a7e0214696e73657274206174206d617020706174683a2000=87-1+6=117-1+d=40+7a7e0214696e73657274206174206d617020706174683a2000=154+7a7e0214696e73657274206174206d617020706174683a2000=460",
    "9a5cb03c4e3876ced83d27f4f91a06935c5bfad6677c3a90baa908f9f29cee65",
    AllStructs
  )
);
registerContract(MemeContest);

// Use this class to interact with the blockchain
export class MemeContestInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    submissions: new RalphMap<HexString, MemeSubmission>(
      MemeContest.contract,
      this.contractId,
      "submissions"
    ),
    submissionCount: new RalphMap<Address, bigint>(
      MemeContest.contract,
      this.contractId,
      "submissionCount"
    ),
  };

  async fetchState(): Promise<MemeContestTypes.State> {
    return fetchContractState(MemeContest, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeMemeSubmittedEvent(
    options: EventSubscribeOptions<MemeContestTypes.MemeSubmittedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      MemeContest.contract,
      this,
      options,
      "MemeSubmitted",
      fromCount
    );
  }

  subscribeMemeJudgedEvent(
    options: EventSubscribeOptions<MemeContestTypes.MemeJudgedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      MemeContest.contract,
      this,
      options,
      "MemeJudged",
      fromCount
    );
  }

  subscribeContestEndedEvent(
    options: EventSubscribeOptions<MemeContestTypes.ContestEndedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      MemeContest.contract,
      this,
      options,
      "ContestEnded",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | MemeContestTypes.MemeSubmittedEvent
      | MemeContestTypes.MemeJudgedEvent
      | MemeContestTypes.ContestEndedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      MemeContest.contract,
      this,
      options,
      fromCount
    );
  }

  view = {
    entryFee: async (
      params?: MemeContestTypes.CallMethodParams<"entryFee">
    ): Promise<MemeContestTypes.CallMethodResult<"entryFee">> => {
      return callMethod(
        MemeContest,
        this,
        "entryFee",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    judgeMeme: async (
      params: MemeContestTypes.CallMethodParams<"judgeMeme">
    ): Promise<MemeContestTypes.CallMethodResult<"judgeMeme">> => {
      return callMethod(
        MemeContest,
        this,
        "judgeMeme",
        params,
        getContractByCodeHash
      );
    },
    submitMeme: async (
      params: MemeContestTypes.CallMethodParams<"submitMeme">
    ): Promise<MemeContestTypes.CallMethodResult<"submitMeme">> => {
      return callMethod(
        MemeContest,
        this,
        "submitMeme",
        params,
        getContractByCodeHash
      );
    },
    endContest: async (
      params?: MemeContestTypes.CallMethodParams<"endContest">
    ): Promise<MemeContestTypes.CallMethodResult<"endContest">> => {
      return callMethod(
        MemeContest,
        this,
        "endContest",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getSubmissionCount: async (
      params: MemeContestTypes.CallMethodParams<"getSubmissionCount">
    ): Promise<MemeContestTypes.CallMethodResult<"getSubmissionCount">> => {
      return callMethod(
        MemeContest,
        this,
        "getSubmissionCount",
        params,
        getContractByCodeHash
      );
    },
    getSubmission: async (
      params: MemeContestTypes.CallMethodParams<"getSubmission">
    ): Promise<MemeContestTypes.CallMethodResult<"getSubmission">> => {
      return callMethod(
        MemeContest,
        this,
        "getSubmission",
        params,
        getContractByCodeHash
      );
    },
    getCurrentPrizePool: async (
      params?: MemeContestTypes.CallMethodParams<"getCurrentPrizePool">
    ): Promise<MemeContestTypes.CallMethodResult<"getCurrentPrizePool">> => {
      return callMethod(
        MemeContest,
        this,
        "getCurrentPrizePool",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    entryFee: async (
      params: MemeContestTypes.SignExecuteMethodParams<"entryFee">
    ): Promise<MemeContestTypes.SignExecuteMethodResult<"entryFee">> => {
      return signExecuteMethod(MemeContest, this, "entryFee", params);
    },
    judgeMeme: async (
      params: MemeContestTypes.SignExecuteMethodParams<"judgeMeme">
    ): Promise<MemeContestTypes.SignExecuteMethodResult<"judgeMeme">> => {
      return signExecuteMethod(MemeContest, this, "judgeMeme", params);
    },
    submitMeme: async (
      params: MemeContestTypes.SignExecuteMethodParams<"submitMeme">
    ): Promise<MemeContestTypes.SignExecuteMethodResult<"submitMeme">> => {
      return signExecuteMethod(MemeContest, this, "submitMeme", params);
    },
    endContest: async (
      params: MemeContestTypes.SignExecuteMethodParams<"endContest">
    ): Promise<MemeContestTypes.SignExecuteMethodResult<"endContest">> => {
      return signExecuteMethod(MemeContest, this, "endContest", params);
    },
    getSubmissionCount: async (
      params: MemeContestTypes.SignExecuteMethodParams<"getSubmissionCount">
    ): Promise<
      MemeContestTypes.SignExecuteMethodResult<"getSubmissionCount">
    > => {
      return signExecuteMethod(MemeContest, this, "getSubmissionCount", params);
    },
    getSubmission: async (
      params: MemeContestTypes.SignExecuteMethodParams<"getSubmission">
    ): Promise<MemeContestTypes.SignExecuteMethodResult<"getSubmission">> => {
      return signExecuteMethod(MemeContest, this, "getSubmission", params);
    },
    getCurrentPrizePool: async (
      params: MemeContestTypes.SignExecuteMethodParams<"getCurrentPrizePool">
    ): Promise<
      MemeContestTypes.SignExecuteMethodResult<"getCurrentPrizePool">
    > => {
      return signExecuteMethod(
        MemeContest,
        this,
        "getCurrentPrizePool",
        params
      );
    },
  };

  async multicall<Calls extends MemeContestTypes.MultiCallParams>(
    calls: Calls
  ): Promise<MemeContestTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends MemeContestTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<MemeContestTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | MemeContestTypes.MultiCallParams
      | MemeContestTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      MemeContest,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
