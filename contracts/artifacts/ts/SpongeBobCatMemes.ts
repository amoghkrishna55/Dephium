/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as SpongeBobCatMemesContractJson } from "../SpongeBobCatMemes.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";

// Custom types for the contract
export namespace SpongeBobCatMemesTypes {
  export type Fields = {
    operatorAddress: Address;
    winMultiplier: bigint;
    tokenID: HexString;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    handleWin: {
      params: CallContractParams<{ win: bigint; amountWagered: bigint }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    handleWin: {
      params: SignExecuteContractMethodParams<{
        win: bigint;
        amountWagered: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  SpongeBobCatMemesInstance,
  SpongeBobCatMemesTypes.Fields
> {
  encodeFields(fields: SpongeBobCatMemesTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  at(address: string): SpongeBobCatMemesInstance {
    return new SpongeBobCatMemesInstance(address);
  }

  tests = {
    handleWin: async (
      params: TestContractParamsWithoutMaps<
        SpongeBobCatMemesTypes.Fields,
        { win: bigint; amountWagered: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "handleWin", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: SpongeBobCatMemesTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const SpongeBobCatMemes = new Factory(
  Contract.fromJson(
    SpongeBobCatMemesContractJson,
    "",
    "23f09147a68b2c7ea819bb6e6e0f79151a45100c9761ad16519c94b5cca7f633",
    []
  )
);
registerContract(SpongeBobCatMemes);

// Use this class to interact with the blockchain
export class SpongeBobCatMemesInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<SpongeBobCatMemesTypes.State> {
    return fetchContractState(SpongeBobCatMemes, this);
  }

  view = {
    handleWin: async (
      params: SpongeBobCatMemesTypes.CallMethodParams<"handleWin">
    ): Promise<SpongeBobCatMemesTypes.CallMethodResult<"handleWin">> => {
      return callMethod(
        SpongeBobCatMemes,
        this,
        "handleWin",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    handleWin: async (
      params: SpongeBobCatMemesTypes.SignExecuteMethodParams<"handleWin">
    ): Promise<SpongeBobCatMemesTypes.SignExecuteMethodResult<"handleWin">> => {
      return signExecuteMethod(SpongeBobCatMemes, this, "handleWin", params);
    },
  };
}
